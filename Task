Легенда
Необходимо   разработать   пакет   Inventory,   который   будет   использоваться   как
компонент   информационной   системы   (ИС)   компании-заказчика.   В   задачи   компонента
входит поддержка процесса хранения и обработки информации о телекоммуникационном и
вспомогательном оборудовании компании. Для этого компонент должен задавать модель
данных   и   реализовывать   сервисные   функции,   которые   будут   использоваться   другими
компонентами ИС.
Компонент   Inventory  не   будет   содержать   реализации   бизнес-логики   компании,   но
обеспечит удобные инструменты для её реализации в других компонентах.
Предполагается, что компонент Inventory  будет со временем развиваться, поскольку
изначально   не   известны   все   требования   к   модели   и   сервисным   функциям.   Так   же,
компонент будет использоваться сразу в нескольких ИС разных компаний. 
В рамках этого задания нужно разработать первую версию компонента Inventory. 
Задание на практическую работу
Реализуйте структуру пакетов компонента Inventory  и последовательно наполните его
интерфейсами и классами, согласно заданию.
Все сообщения об ошибках, которые могут возникать в ваших реализациях, следует
выводить в специальный поток ошибок (System.err.println()), а не стандартный поток вывода.
Перед   каждым   пушем   проверяйте   правильность   решений   по   чеклисту,   данному   в
журнале успеваемости в соответствующей вкладке.
Исходный код должен соответствовать Java code conventions.


Задание 1
В пакете inventory создайте следующие пакеты:
model  – пакет для хранения интерфейсов и вспомогательных классов для реализации
модели данных
model.impl – пакет для хранения реализаций структур данных
service  –   пакет   для   хранения   интерфейса   сервиса   работы   с   инвентарём,   и
вспомогательных классов
service.impl – пакет для хранения реализаций сервиса для работы с инвентарём


Задание 2
Разместите   интерфейсы  Device  (устройство)   и  Rack    (коммутационный   шкаф   или
стойка для крепления оборудования), подготовленные преподавателем (смотреть архив с
доп. материалами), в пакет model. Интерфейс Service – в пакет service.
Коммит.


Задание 3
В   пакете  model.impl  реализуйте   абстрактный  POJO-класс1  AbstractDevice,   который
реализует интерфейс  Device, и реализует все его методы (тем не менее класс абстрактный,
поскольку создание его экземпляров не предусмотрено).
Реализация должна обеспечивать следующие правила изменения значения свойства  in
(инвентарный номер):
1. Изменять номер на новый можно, только если текущий номер по умолчанию (равен
0);
2. Новое значение не может быть отрицательным либо равным 0.
Коммит.


Задание 4
В пакете model.impl реализуйте следующие POJO-классы:
1.  Battery  (батарея   питания).   Реализует   интерфейс  Device.   Наследуется   от
AbstractDevice. Добавляет поле chargeVolume (int).
2. Router (маршрутизатор). Реализует интерфейс Device. Наследуется от AbstractDevice.
Добавляет поле dataRate (int).
3. Switch (коммутатор). Реализует интерфейс Device. Наследуется от Router. Добавляет
поле numberOfPorts (int).
3.   WifiRouter.  Реализует   интерфейс  Device.   Наследуется   от  Router.   Добавляет   поле
securityProtocol (String).
Коммит.


Задание 5
В пакете  model.impl  реализуйте  класс  RackArrayImpl, который реализует  интерфейс
Rack. Класс должен иметь только один конструктор с 1 параметром size (int) – объём стойки
(rack), количество слотов.
При реализации методов, руководствуйтесь описаниями, данными в интерфейсе Rack. В
качестве структуры данных для хранения Device-объектов используйте массив.
Обратите внимание, что добавлять в стойку можно только те устройства, у которых
проставлен инвентарный номер (не по умолчанию, - больше чем 0).


Задание 6
В   пакете  service.impl  реализуйте   класс  ServiceImpl,   который   реализует   интерфейс
Service. Реализуйте в классе ServiceImpl недостающие методы:
1. sortByIN — должен сортировать переданный ему массив устройств по инвентарному
номеру.   Если   в   массиве   попадаются   null,   они   должны   переместится   в   конец.   Если
попадаются устройства с инвентарным номером по умолчанию (равен 0), должны быть
смещены в конец, - после остальных устройств, но перед null-ами.
2. filtrateByType — должен заменять все объекты в массиве на null, значение свойства
type которых не совпадает полностью с указанным, в качестве аргумента метода type.
Коммит. Пуш. Сообщите преподавателю, что все задания выполнены.


Примечание
1.   Под  POJO  в данном курсе понимается простой класс, который содержит только
protected-поля для хранения данных, а так же public get- и set-методы для доступа к ним. 
Объекты такого класса не предназначены для выполнения какой либо логики (если это не
оговорено отдельно), только хранения данных.
Обратите внимание на принцип образования имен  get- и  set-методов из имён полей.
Например поле type будет иметь методы getType и setType.
